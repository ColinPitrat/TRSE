unit Screen;
var
	@donotremove vsync
	vsync : byte ;

	crtc_mode2_org: array[13] of byte=(
	127,64,91,40,38,0,32,34,0,7,32,8,6, 0);	

	crtc_mode2: array[13] of byte=(
	127,80,98,40,38,0,   32,34,0,7,67,8,6, 0);	

	crtc_mode5: array[13] of byte=(
$3F,$28,$31,$24,$26,$00,
$20,$22,$01,$07,$67,$08, $B,0);
	
	crtc_mode4: array[13] of byte=(
$3F, $28, $31, $24, $26, $00,
$20, $22, $01, $07, $67, $08,	$B,0);

	colorsBlue : array[4] of byte = (1,2,3,7); // cyan, purple, blue, black
	
	colorsBlack : array[4] of byte = (7,7,7,7); // white, yellow, red, black
	colorsRed : array[4] of byte = (0,4,6,7); // white, yellow, red, black
	colorsAllRed : array[4] of byte = (6,6,6,7); // white, yellow, red, black
	colorsRedYellow : array[4] of byte = (4,4,6,7); // white, yellow, red, black
	
	colorsRedBlue : array[4] of byte = (0,6,3,7); // white, 
	colorsBlueCyanWhite : array[4] of byte = (0,1,3,7); // white, cyan, blue, black
	colorsBluePurpleWhite : array[4] of byte = (0,2,3,7); // cyan, purple, blue, black

	defaultPalette : array[16] of byte = BuildTable("(i&7)*0x10 + (i^7)");
	palette: array[16] of byte = (
$A0, $B0, $E0, $F0, $84, $94, $C4, $D4, $26, $36, $66, $76, $07, $17, $47, $57);
	palette4: array[16] of byte = (
$80, $90, $A0, $B0, $C0, $D0, $E0, $F0, $07, $17, $27, $37, $47, $57, $67, $77 );
	ytabMode2 : array[256] of integer = BuildTable("0x3000 + (i&7) + Math.floor(i/8.0)*80*8");
	ytabMode5 : array[256] of integer = BuildTable("0x5800 + (i&7) + Math.floor(i/8.0)*40*8");
	xtab : array[200] of integer = BuildTable("i*8");
	xtab4 : array[160] of integer = BuildTable("Math.floor(i/4.0)*8");

	i,x,y,j,v,v2 : byte;
	ppx, ppy, ppc,ppz: byte;
	zp,screenPtr : pointer;
	irqProcedure : pointer at $FE;
	
	pixel1Tab : array[16] of byte = (
	%00000000,
	%00000001,
	%00000100,
	%00000101,
	%00010000,
	%00010001,
	%00010100,
	%00010101,
	%01000000,
	%01000001,
	%01000100,
	%01000101,
	%01010000,
	%01010001,
	%01010100,
	%01010101);

	pixel2Tab : array[16] of byte = (
	%00000000,
	%00000010,
	%00001000,
	%00001010,
	%00100000,
	%00100010,
	%00101000,
	%00101010,
	%10000000,
	%10000010,
	%10001000,
	%10001010,
	%10100000,
	%10100010,
	%10101000,
	%10101010);
	
	pixel5Tab : array[16] of byte = (
    %00000000,
    %00001000,
    %10000000,
    %10001000,
	
    %00000000,
    %00000100,
    %01000000,
    %01000100,

    %00000000,
    %00000010,
    %00100000,
    %00100010,

    %00000000,
    %00000001,
    %00010000,
    %00010001,
//   );
//	pixel5TabReverse : array[16] of byte = (
    %00010001,
    %00010000,
    %00000001,
    %00000000,

    %00100010,
    %00100000,
    %00000010,
    %00000000,

    %01000100,
    %01000000,
    %00000100,
    %00000000,

    %10001000,
    %10000000,
    %00001000,
    %00000000,


	


   );

	pixel5TabInv : array[16] of byte = (
    %00000000,
    %00000000,
    %00000000,
    %00000000,

    %00001000,
    %00000100,
    %00000010,
    %00000001,
	
    %10000000,
    %01000000,
    %00100000,
    %00010000,

    %10001000,
    %01000100,
    %00100010,
    %00010001,

   );
	filledPixel5tab : array[4] of byte = (
	%00000000,%00001111,%11110000,%11111111); 	

/*	j:=0;
	for i:=0 to 4 do
		j+=Screen::pixel5Tab[i<<2 +1];	
*/

	mode5Clear : array[4] of byte = (
//	%11101110,%11011101,%10111011,%01110111);
//	%11101110,%11011101,%10111011,%01110111);
	%01110111,%10111011,%11011101,%11101110);

/*
.crtcregs
	EQUB 127			; R0  horizontal total
	EQUB 64				; R1  horizontal displayed - shrunk a little
	EQUB 91				; R2  horizontal position
	EQUB 40				; R3  sync width
	EQUB 38				; R4  vertical total
	EQUB 0				; R5  vertical total adjust
	EQUB 32				; R6  vertical displayed
	EQUB 34				; R7  vertical position
	EQUB 0				; R8  interlace
	EQUB 7				; R9  scanlines per row
	EQUB 32				; R10 cursor start
	EQUB 8				; R11 cursor end
	EQUB HI(&4000/8)	; R12 screen start address, high
	EQUB LO(&4000/8)	; R13 screen start address, low
*/

procedure Nada();
begin

end;




procedure ResetStack() inline; // Must be inline, rts fails
begin
	asm("
	
	SEI
	TXS				; reset stack
	STX $FE44
	STX $FE45

	");
end;
/**

Sets the Y-scroll register (0-16)
**/
procedure ScrollY(y:global byte);
begin
	poke(sheila_reg,0,5); // 
	poke(sheila_write,0,y);

end;
/**
	Sets the Y scroll-register (mod 7) and moves the screen to the corresponding line.

**/
procedure ScrollToY(y:global byte);
begin
	poke(sheila_reg,0,4); // 
	poke(sheila_write,0,y>>4 + $26);
	poke(sheila_reg,0,5); // 
	poke(sheila_write,0,(y>>1)&7);
end;

/**
	Set number of columns on the screen. Default $28
**/
procedure SetScreenColumns(x:global byte);
begin
	poke(sheila_reg,0,1); 
	poke(sheila_write,0,x);

end;

procedure SetWindowHeight(y: global byte);
begin
	poke(sheila_reg,0,6); // 
	poke(sheila_write,0,y);

end;



procedure PointToY(zp:global pointer;y:global byte);
begin
	if (y>=128) then 
	begin
		y:=y-128;
		asm(" inc Screen_zp+1"); // Point to next page
	end;
	asm("
		lda Screen_y
		asl
		tay
		lda (Screen_zp),y
		sta Screen_screenPtr
		iny
		lda (Screen_zp),y
		sta Screen_screenPtr+1
	"); 

end;

procedure PointToXY(zp:global pointer;px,py:byte) inline;
begin
	PointToY(zp, py);
	screenPtr := screenPtr + xtab[px];	
end;



procedure SetMode(zp:global pointer);
begin

	asm("
	
	ldy #13
crtcloop_copy
	sty $FE00
	lda (Screen_zp),y
	sta $FE01
	dey
	bpl crtcloop_copy

	");

end;

/**

Fill memory address at [zp] with $100*[y] of value [x]

**/
procedure FillBanks(zp:global pointer; x,y : global byte);
begin
	for i:=0 to y do
	begin
		fill(zp,x,0);
		asm(" inc Screen_zp+1");
	end;

end;


procedure SetMode2();
begin
	SetMode(#crtc_mode2);
	asm("
	; Set up video ULA for MODE 2
	LDA #$F4
	STA $FE20
	");
	
end;

/**
	Sets mode 5 

**/
procedure SetMode5();
begin
	SetMode(#crtc_mode5);
	asm("
	; Set up video ULA for MODE 2
	LDA #$C4
	STA $FE20
	");
	
end;
procedure SetMode4();
begin
	SetMode(#crtc_mode4);
	asm("
	; Set up video ULA for MODE 4
	LDA #$88
	STA $FE20
	");
	
end;


/**

   Puts a pixel with color [ppc] at position [ppx,ppy] in mode 2 (160x256 16 colors)
   
**/

procedure PutPixelMode2(ppx, ppy, ppc : global byte);
begin
	PointToY(#ytabMode2, ppy);
	screenPtr := screenPtr + xtab[ppx/2];
	if (ppx&1=1) then
		i:=(screenPtr^&%10101010) | pixel1Tab[ppc]
	else	
		i:=(screenPtr^&%01010101) | pixel2Tab[ppc];
	
	screenPtr^ := i;

end;

/**

   WARNING NOT IMPLEMENTED YET
   
**/
procedure PutPixelMode5(ppx, ppy, ppc : global byte);
begin
	PointToY(#ytabMode5, ppy);
	screenPtr := screenPtr + xtab[ppx/4];
	i :=(ppx&3);
	v := pixel5Tab[i<<2+ppc];
	v2:=(screenPtr^ & mode5Clear[i]);
	screenPtr^ := v2 | v;

end;


procedure Init();
begin
	asm("
	LDA #$7F
	STA $FE4E			; disable all interrupts
	STA $FE43					; set keyboard data direction
	LDA #$C2
	STA $FE4E			; enable VSync and timer interrupt
	LDA #$0F
	STA $FE42			; set addressable latch for writing
;	LDA #3
;	STA $FE40			; keyboard write enable
	LDA #0
	STA $FE4B			; timer 1 one shot mode
	");
	irqProcedure := #Nada;
end;


procedure StartInterrupts() inline;
begin
	asm(" cli");
end;


procedure SetPalette(zp:global pointer);
begin

asm("
	; Set up palette for MODE 2
	
	ldy #15
palloop_copy
	lda (Screen_zp),y
	sta $FE21
	ora #$80
	sta $FE21
	dey
	bpl palloop_copy

	");

end;


procedure SetMode5Palette(zp:global pointer);
begin
	for i:=0 to 16 do
	begin
		j:=(palette[i])&$F0; 
		j:=j + zp[i>>2];
		palette[i] := j;	
	end;
	SetPalette(#palette);
end;

procedure SetPalette4(x,y:global byte);
begin
	zp:=#x;
	for i:=0 to 16 do
	begin
		j:=(palette4[i])&$F0; 
		j:=j + zp[i>>3];
		palette4[i] := j;	
	end;
	SetPalette(#palette4);
end;



procedure SetBackgroundColor(x:global byte);
begin
	asm("
	lda Screen_x
	and #15
	sta $FE21
	");
end;

procedure SetBorderColor(x:global byte);
begin
	asm("
	lda Screen_x
	;and #15
//	sta $FE23 ;????
	sta $FE23 ;????
	");
end;

                                                                                                                                                              

interrupt DefaultIRQ();
begin
/*	asm(" 
		lda $fc
		rti
		");*/
	StartIRQ(0);
	asm("
timerlengthHi		= $34
timerlengthLo		= 00

	

	
	LDA $FE4D
	AND #2
	BNE irqvsync
irqtimer
	LDA #$40
	STA $FE4D
	INC Screen_vsync

	");
	call(irqProcedure);

	asm("	
;	LDA Screen_vsync ; some color
;	and #15
;	STA $FE21
	");	
	CloseIRQ();	
	returninterrupt();
	asm("
irqvsync:
	STA $FE4D
	LDA timerlengthLo
	STA $FE44
	LDA timerlengthHi
	STA $FE45
	");

	CloseIRQ();
end;






procedure WaitForVerticalSync();
begin
	asm("
	
vsync_wait:
	lda Screen_vsync
	beq vsync_wait
	lda #0
	sta Screen_vsync

	");
end;



procedure InitStandardScreenAndIRQ() inline;
begin
	ResetStack();
	Init();
	RasterIRQ(DefaultIRQ());
	StartInterrupts();
end;

end.
